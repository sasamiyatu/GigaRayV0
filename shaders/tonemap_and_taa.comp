#version 460

#extension GL_EXT_scalar_block_layout : enable
#extension GL_GOOGLE_include_directive : enable
#extension GL_EXT_debug_printf : enable

#include "../shared/shared.h"
#include "tonemappers.glsl"
#include "misc.glsl"

layout(local_size_x = 8, local_size_y = 8, local_size_z = 1) in;

layout( push_constant ) uniform constants
{
    ivec2 size;
} control;

layout(binding = 0, set = 0, rgba32f) uniform image2D composition_input;
layout(binding = 1, set = 0, rgba32f) uniform image2D final_output;
layout(binding = 2, set = 0) uniform sampler2D history;
layout(binding = 3, set = 0, rgba32f) uniform image2D out_history;
layout(binding = 4, set = 0, scalar) readonly buffer global_constants_t
{
    Global_Constants_Data data;
} global_constants;
layout(binding = 5, set = 0, scalar) uniform camera_buffer{
    Camera_Data current;
    Camera_Data previous;
} camera_data;
layout(binding = 6, set = 0, rgba32f) uniform image2D world_position;

vec4 read_radiance(ivec2 p)
{
    vec4 radiance = imageLoad(composition_input, p.xy);

    // Apply exposure
    radiance.rgb *= global_constants.data.exposure;

    // Apply tonemapping
    radiance.rgb = tonemap_reinhardt(radiance.rgb);

    // Apply gamma corrections
    radiance.rgb = linear_to_srgb(radiance.rgb);

    return radiance;
}

void main()
{
    ivec3 p = ivec3(gl_GlobalInvocationID);
    if (any(greaterThanEqual(p.xy, control.size)))
        return;

    vec4 radiance = read_radiance(p.xy);
    vec3 rad_ycocg = linear_to_YCoCg(radiance.rgb);

    vec2 center_uv = (p.xy + 0.5) / vec2(control.size);

    vec3 m1 = rad_ycocg;
    vec3 m2 = m1 * m1;

    float w_sum = 1.0;

    const int RADIUS = 2;
    for (int yy = -RADIUS; yy <= RADIUS; ++yy)
    {
        for (int xx = -RADIUS; xx <= RADIUS; ++xx)
        {
            if (ivec2(xx, yy) == ivec2(0.0)) continue;
            ivec2 q = p.xy + ivec2(xx, yy);
            bool is_in_screen = all(greaterThanEqual(q.xy, ivec2(0))) && all(lessThan(q.xy, control.size));

            float w = is_in_screen ? 1.0 : 0.0;

            vec4 s = read_radiance(q.xy);
            s.rgb = linear_to_YCoCg(s.rgb);

            m1 += s.rgb * w;
            m2 += s.rgb * s.rgb * w;

            w_sum += w;
        }
    }

    m1 /= w_sum;
    m2 /= w_sum;
    vec3 sigma = sqrt(m2 - m1 * m1);
    const float gamma = 1.0;
    vec3 minc = m1 - gamma * sigma;
    vec3 maxc = m1 + gamma * sigma;

    if (global_constants.data.taa == 1)
    {
        if (radiance.w != 0.0)
        {
            vec3 X = imageLoad(world_position, p.xy).xyz;

            vec4 prev_ndc = camera_data.previous.viewproj * vec4(X, 1.0);
            prev_ndc /= prev_ndc.w;
            prev_ndc.y = -prev_ndc.y;

            vec2 uv = prev_ndc.xy * 0.5 + 0.5;

            float is_in_screen = float(clamp(uv, 0.0, 1.0) == uv);

            vec4 render_target_params = vec4(vec2(1.0 / control.size), vec2(control.size));
            vec4 prev_rad = bicubic_filter(history, uv, render_target_params);

            vec2 pixel_motion = uv - center_uv;
            float motion_amount = clamp(length(pixel_motion) / 0.1, 0.0, 1.0);
            float history_weight = mix(0.95, 0.1, motion_amount);

            history_weight *= is_in_screen;

            prev_rad.rgb = linear_to_YCoCg(prev_rad.rgb);
            prev_rad.rgb = clamp(prev_rad.rgb, minc, maxc);
            prev_rad.rgb = YCoCg_to_linear(prev_rad.rgb);

            radiance = mix(radiance, prev_rad, history_weight);
        }
    }

    imageStore(final_output, p.xy, radiance);
    imageStore(out_history, p.xy, radiance);
}