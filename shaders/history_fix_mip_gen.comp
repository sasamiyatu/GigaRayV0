#version 460

#extension GL_EXT_debug_printf : enable
#extension GL_KHR_shader_subgroup_basic : enable
#extension GL_KHR_shader_subgroup_arithmetic : enable

layout(local_size_x = 8, local_size_y = 8, local_size_z = 1) in;

layout(binding = 0, set = 0, rgba32f) uniform image2D accumulated_input;
layout(binding = 1, set = 0) uniform sampler2D depth_input;
layout(binding = 2, set = 0, rgba32f) uniform image2D out_radiance_mip0;
layout(binding = 3, set = 0, rgba32f) uniform image2D out_radiance_mip1;
layout(binding = 4, set = 0, rgba32f) uniform image2D out_radiance_mip2;
layout(binding = 5, set = 0, rgba32f) uniform image2D out_radiance_mip3;
layout(binding = 6, set = 0, rgba32f) uniform image2D out_radiance_mip4;
layout(binding = 7, set = 0, rgba32f) uniform image2D out_view_z_mip0;
layout(binding = 8, set = 0, rgba32f) uniform image2D out_view_z_mip1;
layout(binding = 9, set = 0, rgba32f) uniform image2D out_view_z_mip2;
layout(binding = 10, set = 0, rgba32f) uniform image2D out_view_z_mip3;
layout(binding = 11, set = 0, rgba32f) uniform image2D out_view_z_mip4;

layout( push_constant ) uniform constants
{
    ivec2 size;
    float depth_scale;
} control;

float saturate(float x)
{
    return clamp(x, 0.0, 1.0);
}

vec3 viridis_quintic( float x )
{
	x = saturate( x );
	vec4 x1 = vec4( 1.0, x, x * x, x * x * x ); // 1 x x2 x3
	vec4 x2 = x1 * x1.w * x; // x4 x5 x6 x7
	return vec3(
		dot( x1.xyzw, vec4( +0.280268003, -0.143510503, +2.225793877, -14.815088879 ) ) + dot( x2.xy, vec2( +25.212752309, -11.772589584 ) ),
		dot( x1.xyzw, vec4( -0.002117546, +1.617109353, -1.909305070, +2.701152864 ) ) + dot( x2.xy, vec2( -1.685288385, +0.178738871 ) ),
		dot( x1.xyzw, vec4( +0.300805501, +2.614650302, -12.019139090, +28.933559110 ) ) + dot( x2.xy, vec2( -33.491294770, +13.762053843 ) ) );
}

#define MAX_HISTORY_FIX_FRAME 4

shared vec4 workgroup_radiance_averages[8 * 8];
shared float workgroup_view_z_averages[8 * 8];

void main()
{
    ivec3 p = ivec3(gl_GlobalInvocationID);
    if (any(greaterThanEqual(p.xy, control.size)))
        return;

    // Each thread reads a 2x2 filter footprint to generate the first mip level
    ivec2 in_pixel_origin = p.xy * 2;

    vec4 total_radiance = vec4(0.0);
    float total_view_z = 0.0;
    for (int y = 0; y < 2; ++y)
    {
        for (int x = 0; x < 2; ++x)
        {
            ivec2 in_p = in_pixel_origin + ivec2(x, y);
            vec4 in_rad = imageLoad(accumulated_input, in_p);
            float in_depth = texelFetch(depth_input, in_p, 0).r;
            float view_z = control.depth_scale / in_depth;
            imageStore(out_radiance_mip0, in_p, in_rad);
            imageStore(out_view_z_mip0, in_p, vec4(view_z));
            total_radiance += in_rad * 0.25;
            total_view_z += view_z * 0.25;
        }
    }

    workgroup_radiance_averages[gl_LocalInvocationID.y * 8 + gl_LocalInvocationID.x] = total_radiance;
    workgroup_view_z_averages[gl_LocalInvocationID.y * 8 + gl_LocalInvocationID.x] = total_view_z;
    imageStore(out_radiance_mip1, p.xy, total_radiance);
    imageStore(out_view_z_mip1, p.xy, vec4(total_view_z));

    barrier();


    if (all(lessThan(gl_LocalInvocationID.xy, uvec2(4, 4))))
    {
        total_radiance = vec4(0.0);
        total_view_z = 0.0;

        uvec2 in_p_origin = gl_LocalInvocationID.xy * 2;
        for (int y = 0; y < 2; ++y)
        {
            for (int x = 0; x < 2; ++x)
            {
                uvec2 local_p = in_p_origin + uvec2(x, y);
                uint linear_index = local_p.y * 8 + local_p.x;
                vec4 in_rad = workgroup_radiance_averages[linear_index];
                float in_view_z = workgroup_view_z_averages[linear_index];
                total_radiance += in_rad * 0.25;
                total_view_z += in_view_z * 0.25;
            }
        }


        barrier();
        ivec2 out_p = ivec2(gl_WorkGroupID.xy) * 4 + ivec2(gl_LocalInvocationID.xy);

        imageStore(out_radiance_mip2, out_p.xy, total_radiance);
        imageStore(out_view_z_mip2, out_p.xy, vec4(total_view_z));

        workgroup_radiance_averages[gl_LocalInvocationID.y * 4 + gl_LocalInvocationID.x] = total_radiance;
        workgroup_view_z_averages[gl_LocalInvocationID.y * 4 + gl_LocalInvocationID.x] = total_view_z;

        barrier();

        if (all(lessThan(gl_LocalInvocationID.xy, uvec2(2, 2))))
        {
            total_radiance = vec4(0.0);
            total_view_z = 0.0;
            uvec2 in_p_origin = gl_LocalInvocationID.xy * 2;
            for (int y = 0; y < 2; ++y)
            {
                for (int x = 0; x < 2; ++x)
                {
                    uvec2 local_p = in_p_origin + uvec2(x, y);
                    uint linear_index = local_p.y * 4 + local_p.x;
                    vec4 in_rad = workgroup_radiance_averages[linear_index];
                    float in_view_z = workgroup_view_z_averages[linear_index];
                    total_radiance += in_rad * 0.25;
                    total_view_z += in_view_z * 0.25;
                }
            }

            barrier();

            ivec2 out_p = ivec2(gl_WorkGroupID.xy) * 2 + ivec2(gl_LocalInvocationID.xy);

            imageStore(out_radiance_mip3, out_p.xy, total_radiance);
            imageStore(out_view_z_mip3, out_p.xy, vec4(total_view_z));
            workgroup_radiance_averages[gl_LocalInvocationID.y * 2 + gl_LocalInvocationID.x] = total_radiance;
            workgroup_view_z_averages[gl_LocalInvocationID.y * 2 + gl_LocalInvocationID.x] = total_view_z;

            barrier();

            if (gl_LocalInvocationID.xy == uvec2(0))
            {
                total_radiance = vec4(0.0);
                total_view_z = 0.0;
                uvec2 in_p_origin = uvec2(0);
                for (int y = 0; y < 2; ++y)
                {
                    for (int x = 0; x < 2; ++x)
                    {
                        uvec2 local_p = in_p_origin + uvec2(x, y);
                        uint linear_index = local_p.y * 2 + local_p.x;
                        vec4 in_rad = workgroup_radiance_averages[linear_index];
                        float in_view_z = workgroup_view_z_averages[linear_index];
                        total_radiance += in_rad * 0.25;
                        total_view_z += in_view_z * 0.25;
                    }
                }

                ivec2 out_p = ivec2(gl_WorkGroupID.xy);

                imageStore(out_radiance_mip4, out_p.xy, total_radiance);
                imageStore(out_view_z_mip4, out_p.xy, vec4(total_view_z));
            }
            
        }
    }
}

