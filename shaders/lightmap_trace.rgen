#version 460

#extension GL_EXT_ray_tracing : require
#extension GL_GOOGLE_include_directive : enable
#extension GL_EXT_debug_printf : enable
#extension GL_EXT_scalar_block_layout : enable
#extension GL_EXT_nonuniform_qualifier : enable

#define M_PI 3.14159265359
#include "random.glsl"
#include "lightmap.glsl"
#include "sampling.glsl"
#include "random.glsl"
#include "math.glsl"

layout(location = 0) rayPayloadEXT Ray_Payload pay;

struct Texel_Sample
{
	uint mesh_index;
	uint primitive_index;
    uvec2 texel;
	vec3 barycentrics;
};

#define MAX_TEXEL_SAMPLES 8

struct Texel_Sample_Data
{
	uint sample_count;
	Texel_Sample samples[MAX_TEXEL_SAMPLES];
};

struct Transform_Data
{
    mat4 model;
    mat4 inverse_model;
};

layout(push_constant) uniform constants
{
    uint frame_number;
    uint frames_accumulated;
} control;

layout(binding = 0, set = 0, rgba32f) uniform image2D lightmap;
layout(binding = 1, set = 0) uniform accelerationStructureEXT scene;
layout(binding = 2, set = 0, scalar) readonly buffer sample_buffer_t
{
    Texel_Sample_Data samples[];
} sample_buffer;
layout(binding = 3, set = 0) readonly buffer mesh_transform_buffer_t
{
    Transform_Data transforms[];
} mesh_transform_buffer;
layout(binding = 4, set = 0, scalar) readonly buffer material_buffer_t
{
    Material materials[];
} material_buffer;

#define MAX_BOUNCES 4

void main()
{
    ivec2 p = ivec2(gl_LaunchIDEXT.xy);

    Texel_Sample_Data data = sample_buffer.samples[p.x];
    uint sample_index = control.frame_number % 8;
    if (sample_index >= data.sample_count) return;

    Texel_Sample s = data.samples[sample_index];
    ivec2 texel = ivec2(s.texel);
    vec3 ro;
    vec3 rd;
    uvec4 seed = uvec4(texel.xy, control.frame_number, sample_index);
    {
        Vertex v = get_interpolated_vertex2(s.mesh_index, s.primitive_index, s.barycentrics);

        mat4 model = mesh_transform_buffer.transforms[s.mesh_index].model;
        mat4 inverse_model = mesh_transform_buffer.transforms[s.mesh_index].inverse_model;
        vec3 world_normal = v.normal * mat3(inverse_model);
        vec3 world_pos = vec3(model * vec4(v.position, 1.0)); 
        //imageStore(lightmap, texel, vec4(world_pos, 1.0)); return;
        ro = offset_ray(world_pos, world_normal);
        vec4 rand = vec4(pcg4d(seed)) * ldexp(1.0, -32);
        mat3 tbn = create_tangent_space(world_normal);
        rd = tbn * random_cosine_hemisphere(rand.xy);
    }

    vec3 radiance = vec3(0.0);
    vec3 throughput = vec3(1.0);
    
    for (int i = 0; i < MAX_BOUNCES; ++i)
    {
        traceRayEXT(
            scene,
            gl_RayFlagsOpaqueEXT,
            0xFF,
            0,
            0,
            0,
            ro,
            0.0,
            rd,
            100000.0,
            0
        );
        
        if (pay.instance_id != -1)
        {
            // Hit
            Material mat = material_buffer.materials[pay.instance_id];
            radiance += throughput * mat.emissive_factor * 20.0;
            
            Vertex v = get_interpolated_vertex(pay.instance_id, pay.prim_id, pay.barycentrics);
            vec3 world_normal = normalize(vec3(vec4(v.normal, 0) * pay.world_to_object));
            if (dot(world_normal, -rd) < 0.0) world_normal = -world_normal;
            vec3 world_pos = vec3(pay.object_to_world * vec4(v.position, 1.0));

            vec4 rand = vec4(pcg4d(seed)) * ldexp(1.0, -32);
            mat3 tbn = create_tangent_space(world_normal);
            ro = offset_ray(world_pos, world_normal);
            rd = tbn * random_cosine_hemisphere(rand.xy);

            throughput *= mat.base_color_factor.rgb;
            //if (mat.base_color_factor.r > 0.0) debugPrintfEXT("rgb: %f %f %f", mat.base_color_factor.r, mat.base_color_factor.g, mat.base_color_factor.b);
        }
        else
        {
            break;
        }
    }

    vec3 out_color = radiance.rgb;
    if (control.frames_accumulated != 0)
    {
        vec4 prev_color = imageLoad(lightmap, texel.xy);
        float total = control.frames_accumulated + 1.0;
        out_color = mix(out_color.rgb, prev_color.rgb, float(control.frames_accumulated) / total);
    }
    //out_color = vec3(pcg4d(seed)) * ldexp(1.0, -32);
    imageStore(lightmap, texel, vec4(out_color.rgb, 1.0));
    //imageStore(lightmap, p, vec4(1.0, 0.0, 1.0, 1.0));
}
