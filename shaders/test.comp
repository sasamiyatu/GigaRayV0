#version 460
#extension GL_EXT_debug_printf : enable
#extension GL_GOOGLE_include_directive : enable
#include "brdf.h"

layout(local_size_x = 8, local_size_y = 8, local_size_z = 1) in;

layout(binding = 0, set = 0, rgba32f) uniform image2D path_tracer_input_image;
layout(binding = 1, set = 0, rgba32f) uniform image2D raster_input_image;
layout(binding = 2, set = 0, rgba32f) uniform image2D output_image;
layout(binding = 3, set = 0) uniform sampler2D test_img;

layout( push_constant ) uniform constants
{
    ivec2 size;
    float image_split_pos;
} control;

void main()
{
    ivec3 p = ivec3(gl_GlobalInvocationID);
    if (any(greaterThanEqual(p.xy, control.size)))
        return;
    
    int split_pixel = int(float(control.size.x) * control.image_split_pos);
    const float exposure = 1.0;
    vec4 color = vec4(0.0);
    if (p.x <= split_pixel)
        color = imageLoad(path_tracer_input_image, p.xy);
    else
        color = imageLoad(raster_input_image, p.xy);
    vec2 uv = vec2(p.xy) / vec2(control.size);
    uv.y = 1.f - uv.y;
    vec4 v = textureLod(test_img, uv, 0);
    //color.rgb = v.rgb;
    color.rgb = color.rgb / (color.rgb + 1.0);
    color.rgb *= exposure;
    vec3 gamma_corrected = pow(color.rgb, vec3(0.4545));
    //vec3 gamma_corrected = color.rgb;
    imageStore(output_image, p.xy, vec4(gamma_corrected.rgb, 1.0));

    //vec4 v = imageLoad(test_img, p.xy + ivec2(0, 500));
    //imageStore(output_image, p.xy, v);
    //imageStore(output_image, p.xy, vec4(1.0, 0.0, 1.0, 1.0));
}