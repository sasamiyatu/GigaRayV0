#version 460

#extension GL_GOOGLE_include_directive : enable
#extension GL_EXT_debug_printf : enable
#extension  GL_EXT_scalar_block_layout : enable

#include "blur_common.glsl"
#include "math.glsl"
#include "../shared/shared.h"

layout(local_size_x = 8, local_size_y = 8, local_size_z = 1) in;

layout(binding = 0, set = 0, rgba32f) uniform image2D noisy_input;
layout(binding = 1, set = 0, rgba32f) uniform image2D normal_roughness;
layout(binding = 2, set = 0, rgba32f) uniform image2D world_position;
layout(binding = 3, set = 0) uniform sampler2D depth;
layout(binding = 4, set = 0, rgba32f) uniform image2D blurred_output;
layout(binding = 5, set = 0, scalar) readonly buffer global_constants_t
{
    Global_Constants_Data data;
} global_constants;
layout(binding = 6, set = 0, rgba32f) uniform image2D history_length;

layout( push_constant ) uniform constants
{
    mat2 rot;
    ivec2 size;
    float depth_scale;
} control;

float gaussian[3] = {0.27, 0.44, 0.27};

void main()
{
    return;
    ivec3 p = ivec3(gl_GlobalInvocationID);
    if (any(greaterThan(p.xy, control.size)))
        return;

    vec4 center = imageLoad(noisy_input, p.xy);

    if (global_constants.data.blur_radius == 0.0f)
    {
        imageStore(blurred_output, p.xy, center);
        return;
    }
    
    vec3 p0 = imageLoad(world_position, p.xy).xyz;
    vec4 n0r0 = imageLoad(normal_roughness, p.xy);
    vec3 n0 = decode_unit_vector(n0r0.xy, false, true);
    float d0 = texelFetch(depth, p.xy, 0).r;
    float accumulated_frames = imageLoad(history_length, p.xy).r * 255.0;
    float blur_radius_scale = 1.0 / accumulated_frames;

    vec3 X = (p0 - global_constants.data.camera_origin);

    float z0 = control.depth_scale / d0;
    float blur_radius = global_constants.data.blur_radius;
    float hit_dist_normalization = global_constants.data.hit_dist_params.x + global_constants.data.hit_dist_params.y * abs(z0);
    float frustum_size = global_constants.data.min_rect_dim_mul_unproject * abs(z0);
    float hit_t = center.a * hit_dist_normalization;
    float hit_dist_factor = clamp(hit_t / frustum_size, 0.0, 1.0);
    blur_radius *= hit_dist_factor;
    blur_radius *= blur_radius_scale;
    
    float a = 0.25 / ( global_constants.data.plane_distance_sensitivity * frustum_size );
    float b = -dot( n0, X ) * a;

    float plane_dist_norm = 4.0 / (1.0 + z0);

    float sum = 1.0;
    vec4 diff = center;

    mat2 rotation = mat2(1.0);
    if (global_constants.data.blur_kernel_rotation_mode == 2)
    {
        uvec4 seed = uvec4(p.x, p.y, global_constants.data.frame_number, 1337);
        vec4 rand = vec4(pcg4d(seed)) *  ldexp(1.0, -32);
        float theta = rand.x * 2.0 * M_PI;
        float cos_theta = cos(theta);
        float sin_theta = sin(theta);
        rotation = mat2(cos_theta, sin_theta, -sin_theta, cos_theta);
    }
    else if (global_constants.data.blur_kernel_rotation_mode == 1)
    {
        rotation = control.rot;
    }

    for (int i = 0; i < NUM_SAMPLES; ++i)
    {
        vec3 offset = poisson_samples[i];

        vec2 sample_pos = vec2(p.xy + 0.5) + rotation * offset.xy * blur_radius;
        ivec2 q = ivec2(sample_pos);

        vec4 s = imageLoad(noisy_input, q.xy);
        vec3 pos = imageLoad(world_position, q.xy).xyz;
        vec3 Xs = pos - global_constants.data.camera_origin;
        vec3 nr = imageLoad(normal_roughness, q.xy).xyz;
        vec3 n = decode_unit_vector(nr.xy, false, true);
        //float w = get_gaussian_weight(offset.z);
        float w = 1.0;
        bool is_in_screen = (all(greaterThanEqual(q.xy, ivec2(0, 0))) && all(lessThan(q.xy, control.size)));

        float ndotx = dot(Xs, n);
        float plane_dist_w = abs(ndotx * a + b);

        float w_plane = exp(-3.0 * plane_dist_w);

        // if (p.xy == ivec2(640, 360))
        //     debugPrintfEXT("plane w: %f", w_plane);


        vec3 ray = pos - p0;
        float dist_to_plane = abs(dot(ray, n0));
        float relative_plane_dist = dist_to_plane / z0;

        float w_n = smoothstep(0.7, 1.0,abs(dot(n, n0)));

        //w *= w_plane;

        w = is_in_screen ? w : 0.0;
        s = is_in_screen ? s : vec4(0.0);
        
        sum += w;
        diff += s * w;
    }

    diff /= sum;

    imageStore(blurred_output, p.xy, diff);
}