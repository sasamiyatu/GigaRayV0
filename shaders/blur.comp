#version 460

#extension GL_GOOGLE_include_directive : enable
#extension GL_EXT_debug_printf : enable
#extension  GL_EXT_scalar_block_layout : enable

#include "blur_common.glsl"
#include "math.glsl"
#include "../shared/shared.h"
#include "misc.glsl"

layout(local_size_x = 8, local_size_y = 8, local_size_z = 1) in;

layout(binding = 0, set = 0, rgba32f) uniform image2D noisy_input;
layout(binding = 1, set = 0, rgba32f) uniform image2D normal_roughness;
layout(binding = 2, set = 0, rgba32f) uniform image2D world_position;
layout(binding = 3, set = 0) uniform sampler2D depth;
layout(binding = 4, set = 0, rgba32f) uniform image2D blurred_output;
layout(binding = 5, set = 0, scalar) readonly buffer global_constants_t
{
    Global_Constants_Data data;
} global_constants;
layout(binding = 6, set = 0, rgba32f) uniform image2D history_length;
layout(binding = 7, set = 0, scalar) uniform camera_buffer{
    Camera_Data current;
    Camera_Data previous;
} camera_data;
layout(binding = 8, set = 0, rgba32f) uniform image2D debug_output;

layout (constant_id = 0) const int BLUR_PASS = 1;
layout (constant_id = 1) const int BLUR_CHANNEL = 0;

layout( push_constant ) uniform constants
{
    mat2 rot;
    ivec2 size;
    float depth_scale;
    float blur_radius;
    float blur_radius_scale;
} control;

float gaussian[3] = {0.27, 0.44, 0.27};

vec2 get_sample_pos(vec3 center, float blur_radius, vec3 offset, vec3 T, vec3 B, mat4 viewproj, mat2 rotation)
{
    T *= blur_radius;
    B *= blur_radius;

    if (global_constants.data.use_quadratic_distribution == 1)
        offset.xy *= offset.z;

    offset.xy = rotation * offset.xy;
    vec3 sample_pos_world = center + T * offset.x + B * offset.y;

    vec4 clip_pos = viewproj * vec4(sample_pos_world, 1.0);
    clip_pos /= clip_pos.w;
    clip_pos.y = -clip_pos.y;

    vec2 uv = clip_pos.xy * 0.5 + 0.5;

    return uv * control.size;
}

void main()
{
    ivec3 p = ivec3(gl_GlobalInvocationID);
    if (any(greaterThan(p.xy, control.size)))
        return;

    vec4 center = imageLoad(noisy_input, p.xy);

    if (control.blur_radius == 0.0 || control.blur_radius_scale == 0.0)
    {
        imageStore(blurred_output, p.xy, center);
        return;
    }

    vec2 accum_frames = imageLoad(history_length, p.xy).rg * 255.0;
    float accumulated_frames = BLUR_CHANNEL == BLUR_CHANNEL_DIFFUSE ? accum_frames.x : accum_frames.y;
    
    vec3 p0 = imageLoad(world_position, p.xy).xyz;
    vec3 V = normalize(camera_data.current.inverse_view[3].xyz - p0);
    vec4 n0r0 = imageLoad(normal_roughness, p.xy);
    vec3 N = decode_unit_vector(n0r0.xy, false, true);
    float d0 = texelFetch(depth, p.xy, 0).r;

    float roughness = 1.0;
    if (BLUR_CHANNEL == BLUR_CHANNEL_SPECULAR)
    {
        roughness = n0r0.b * n0r0.b;
    }

    if (d0 == 0.0)
    {
        imageStore(blurred_output, p.xy, center);
        return;
    }

    float inv_accum_speed = 1.0 / accumulated_frames;
    if (BLUR_PASS == PRE_BLUR_CONSTANT_ID)
        inv_accum_speed = 1.0;

    vec3 X = (p0 - global_constants.data.camera_origin);

    float Z = control.depth_scale / d0;
    float hit_dist_normalization = get_hit_distance_normalization(global_constants.data.hit_dist_params, Z, roughness);
    float frustum_size = global_constants.data.min_rect_dim_mul_unproject * abs(Z);
    float hit_t = center.a * hit_dist_normalization;
    float hit_dist_factor = clamp(hit_t / frustum_size, 0.0, 1.0);
    float hit_t0 = center.a;
    float blur_radius = control.blur_radius;
    if (BLUR_PASS == PRE_BLUR_CONSTANT_ID)
    {
        if (global_constants.data.hit_distance_scaling == 1)
            blur_radius *= hit_dist_factor;
    }
    else
    {
        hit_dist_factor = mix(hit_dist_factor, 1.0, smoothstep(20.0, 4.0, accumulated_frames));
        if (global_constants.data.hit_distance_scaling == 1)
            blur_radius *= hit_dist_factor;

        if (global_constants.data.frame_num_scaling == 1)
        {
            float frame_count_scale = smoothstep(20.0, 4.0, accumulated_frames);
            blur_radius *= (1.0 + 2.0 * frame_count_scale) / 3.0;
        }

        blur_radius += 1.0; // Avoid underblurring
        blur_radius *= control.blur_radius_scale;
    }

    mat3 tbn = get_kernel_basis(V, N, roughness);
    float world_radius = blur_radius * global_constants.data.unproject * Z;

    float normal_weight_params = get_normal_weight_params(inv_accum_speed, global_constants.data.lobe_percentage, roughness);

    float plane_dist_norm = global_constants.data.plane_dist_norm_scale / (1.0 + Z * global_constants.data.unproject);
    vec3 Xv = (camera_data.current.view * vec4(p0, 1.0)).xyz;
    vec3 Nv = mat3(camera_data.current.view) * N;
    vec2 geometry_weight_params = get_geometry_weight_params(global_constants.data.plane_distance_sensitivity, frustum_size, Xv, Nv, inv_accum_speed);

    vec2 hit_distance_weight_params = get_hit_distance_weight_params(hit_t0, inv_accum_speed);

    float sum = 1.0;
    vec4 diff = center;

    mat2 rotation = mat2(1.0);
    if (global_constants.data.blur_kernel_rotation_mode == 2)
    {
        uvec4 seed = uvec4(p.x, p.y, global_constants.data.frame_number, 1337);
        vec4 rand = vec4(pcg4d(seed)) *  ldexp(1.0, -32);
        float theta = rand.x * 2.0 * M_PI;
        float cos_theta = cos(theta);
        float sin_theta = sin(theta);
        rotation = mat2(cos_theta, sin_theta, -sin_theta, cos_theta);
    }
    else if (global_constants.data.blur_kernel_rotation_mode == 1)
    {
        rotation = control.rot;
    }

    for (int i = 0; i < NUM_SAMPLES; ++i)
    {
        vec3 offset = poisson_samples[i];

        vec2 sample_pos;
        if (BLUR_PASS == PRE_BLUR_CONSTANT_ID)
        {
            sample_pos = vec2(p.xy + 0.5) + rotation * offset.xy * blur_radius;
        }
        else
            sample_pos = get_sample_pos(p0, world_radius, offset, tbn[0], tbn[1], camera_data.current.viewproj, rotation);

        ivec2 q = ivec2(sample_pos);

        bool is_in_screen = (all(greaterThanEqual(q.xy, ivec2(0, 0))) && all(lessThan(q.xy, control.size)));

#if 1
        if (p.xy == ivec2(640, 360) && is_in_screen)
        {
            //debugPrintfEXT("q: %d %d", q.x, q.y);
            imageStore(debug_output, q.xy, vec4(viridis_quintic(offset.z), 1.0));
        }
#endif

        vec4 s = imageLoad(noisy_input, q.xy);
        vec3 pos = imageLoad(world_position, q.xy).xyz;
        vec3 Xs = pos - global_constants.data.camera_origin;
        vec3 nr = imageLoad(normal_roughness, q.xy).xyz;
        vec3 Ns = decode_unit_vector(nr.xy, false, true);
        float sample_roughness = BLUR_CHANNEL == BLUR_CHANNEL_SPECULAR ? nr.b : 1.0;

        float w = 1.0;
        if (global_constants.data.use_gaussian_weight == 1)
            w = get_gaussian_weight(offset.z);

        vec3 Nvs = mat3(camera_data.current.view) * Ns;
        vec3 Xvs = (camera_data.current.view * vec4(pos, 1.0)).xyz;
        float ndotx = dot(Xvs, Nv);
        float plane_dist_w = abs(ndotx * geometry_weight_params.x + geometry_weight_params.y);
        plane_dist_w = smoothstep(1.0, 0.0, plane_dist_w);

        //float w_plane = smoothstep(saturate(1))

        // if (p.xy == ivec2(640, 360))
        //     debugPrintfEXT("plane w: %f", w_plane);

        float cosa = clamp(dot(Ns, N), 0.0, 1.0);
        float a = acos(cosa);
        float w_n = a * normal_weight_params;
        w_n = smoothstep(1.0, 0.0, w_n);

        vec3 ray = pos - p0;
        float dist_to_plane = abs(dot(ray, N));
        float relative_plane_dist = dist_to_plane / Z;
        float w_ = clamp(1.0 - abs(dist_to_plane) * plane_dist_norm, 0.0, 1.0);

        float w_hit_dist = exp(-3.0 * abs(s.a * hit_distance_weight_params.x + hit_distance_weight_params.y));
        w_hit_dist = mix(0.1, 1.0, w_hit_dist);

        if (global_constants.data.use_geometry_weight == 1)
            //w *= w_;
            w *= plane_dist_w;

        if (global_constants.data.use_normal_weight == 1)
            w *= w_n;

        if (global_constants.data.use_hit_distance_weight == 1)
            w *= w_hit_dist;

        //w *= get_roughness_weight(roughness, sample_roughness);

        w = is_in_screen ? w : 0.0;
        s = is_in_screen ? s : vec4(0.0);
        
        sum += w;
        diff += s * w;
    }

    diff /= sum;

    imageStore(blurred_output, p.xy, diff);
}