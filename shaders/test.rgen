#version 460
#extension GL_EXT_debug_printf : enable
#extension GL_EXT_ray_tracing : require
#extension  GL_EXT_scalar_block_layout : require
#extension GL_GOOGLE_include_directive : enable

#include "test.glsl"

struct Vertex_Data
{
    vec3 pos;
};

struct Index_Data
{
    uvec3 index;
};

layout(location = 0) rayPayloadEXT Ray_Payload pay;
layout(binding = 0, set = 0, rgba32f) uniform image2D output_image;
layout(binding = 1, set = 0) uniform accelerationStructureEXT scene;
layout(binding = 2, set = 0, scalar) readonly buffer vertex_buffer_t
{
    Vertex_Data verts[];
} vertex_buffer;

layout(binding = 3, set = 0, scalar) readonly buffer index_buffer_t
{
    Index_Data indices[];
} index_buffer;

void main()
{
    pay.color = vec3(0.0);

    const vec2 pixel_center = vec2(gl_LaunchIDEXT.xy) + vec2(0.5);
    const float aspect = float(gl_LaunchSizeEXT.x) / float(gl_LaunchSizeEXT.y);
    vec2 uv = pixel_center / vec2(gl_LaunchSizeEXT.xy);
    uv.y = 1.0 - uv.y;
    uv = uv * 2.0 - 1.0;
    uv.x *= aspect;

    vec3 ro = vec3(0.f, 0.1f, 0.15);
    vec3 rd = normalize(vec3(uv, -1.0));

    traceRayEXT(
        scene,
        gl_RayFlagsOpaqueEXT,
        0xFF,
        0,
        0,
        0,
        ro,
        0.0,
        rd,
        1000.0,
        0
    );

    vec3 out_color = pay.color;
    vec3 normal = vec3(0.0);
    if (pay.prim_id != -1)
    {
        uvec3 inds = index_buffer.indices[pay.prim_id].index;
        vec3 v0 = vertex_buffer.verts[inds.x].pos;
        vec3 v1 = vertex_buffer.verts[inds.y].pos;
        vec3 v2 = vertex_buffer.verts[inds.z].pos;
        normal = normalize(cross(v2 - v0, v1 - v0));
        if (dot(normal, rd) > 0.0) normal = normal * -1.f;

        vec3 L = normalize(vec3(1.0));
        float cos_theata = max(0.0, dot(L, normal));
        out_color = cos_theata * vec3(0.7, 0.2, 0.4);
        //out_color = vec3(1.0, 0.0, 1.0);
        //out_color = normal * 0.5 + 0.5;
    }
    //if (pixel.xy == ivec2(0, 0))
    //    debugPrintfEXT("test");
    /*f (pixel_center.y < 50.0)
        imageStore(output_image, ivec2(gl_LaunchIDEXT), vec4(1.0, 0.0, 1.0, 1.0));
    else*/
    vec3 v0 = vertex_buffer.verts[0].pos;
    uvec3 idx = index_buffer.indices[0].index;
    //debugPrintfEXT("%d %d %d", idx.x, idx.y, idx.z);
    imageStore(output_image, ivec2(gl_LaunchIDEXT), vec4(out_color, 1.0));

}