#version 460
#extension GL_EXT_debug_printf : enable
#extension GL_GOOGLE_include_directive : enable
#extension GL_EXT_scalar_block_layout : enable
#include "brdf.h"
#include "math.glsl"
#include "../shared/shared.h"
#include "misc.glsl"

layout(local_size_x = 8, local_size_y = 8, local_size_z = 1) in;

layout(binding = 0, set = 0, rgba32f) uniform image2D path_tracer_input_image;
layout(binding = 1, set = 0, rgba32f) uniform image2D raster_input_image;
layout(binding = 2, set = 0, rgba32f) uniform image2D normal_roughness;
layout(binding = 3, set = 0, rgba32f) uniform image2D basecolor_metalness;
layout(binding = 4, set = 0) uniform sampler2D depth;
layout(binding = 5, set = 0, rgba32f) uniform image2D indirect_diffuse;
layout(binding = 6, set = 0, rgba32f) uniform image2D denoiser_output;
layout(binding = 7, set = 0, rgba32f) uniform image2D output_image;
layout(binding = 8, set = 0) uniform sampler2D history_fix;
layout(binding = 9, set = 0) uniform sampler2D history_fix_depth;
layout(binding = 10, set = 0, scalar) readonly buffer global_constants_t
{
    Global_Constants_Data data;
} global_constants;
layout(binding = 11, set = 0, rgba32f) uniform image2D history_length;
layout(binding = 12, set = 0, rgba32f) uniform image2D debug_output;

layout( push_constant ) uniform constants
{
    mat4 inv_proj;
    ivec2 size;
    float image_split_pos;
    uint history_lod;
} control;

void main()
{
    ivec3 p = ivec3(gl_GlobalInvocationID);
    if (any(greaterThanEqual(p.xy, control.size)))
        return;
    
    int split_pixel = int(float(control.size.x) * control.image_split_pos);
    const float exposure = 1.0;
    vec4 color = vec4(0.0);
    if (p.x < split_pixel)
        color = imageLoad(path_tracer_input_image, p.xy);
    else
        color = imageLoad(raster_input_image, p.xy);
    vec2 uv = vec2(p.xy + 0.5) / vec2(control.size);

    vec4 normal_roughness = imageLoad(normal_roughness, p.xy);
    vec4 basecolor = imageLoad(basecolor_metalness, p.xy);
    //color.rgb = v.rgb;
    vec3 normal = decode_unit_vector(normal_roughness.rg, false, true);
    float depth = texelFetch(depth, p.xy, 0).r;
    vec4 indirect_diffuse = imageLoad(indirect_diffuse, p.xy);
    vec4 denoised = imageLoad(denoiser_output, p.xy);

    if (global_constants.data.use_ycocg_color_space == 1)
    {
        denoised.rgb = YCoCg_to_linear(denoised.rgb);
        indirect_diffuse.rgb = YCoCg_to_linear(indirect_diffuse.rgb);
    }

    vec3 albedo = basecolor.rgb * (1.0 - basecolor.a);

    vec4 debug = imageLoad(debug_output, p.xy);

    vec4 history_fix = textureLod(history_fix, uv, control.history_lod);
    if (control.history_lod == 0)
        history_fix = denoised;

    //vec3 F0 = mix(vec3(0.04), basecolor.rgb, basecolor.a);
    //albedo = albedo * (1.0 - F0) + F0;

    if (split_pixel == 0)
        color.rgb += denoised.rgb * albedo;

    //vec3 gamma_corrected = color.rgb;

    //imageStore(output_image, p.xy, vec4(normal * 0.5 + 0.5, 1.0));

    vec2 ndc = (vec2(p.xy) + 0.5) / imageSize(raster_input_image);
    ndc = ndc * 2.0 - 1.0;
    vec4 screen_space = vec4(ndc, depth, 1.0);

    // These work
    vec4 view_space = control.inv_proj * screen_space;
    view_space.xyz /= view_space.w;
    float view_z = 1.0 / (control.inv_proj[2][3] * depth);

    float history_fix_z = textureLod(history_fix_depth, uv, control.history_lod).r;

    vec3 final_output = vec3(0.0);

    switch (global_constants.data.screen_output)
    {
        case 0: // final composition
            final_output = color.rgb;
            break;
        case 1: // noisy indirect diffuse
            final_output = indirect_diffuse.rgb;
            break;
        case 2: // denoised indirect diffuse
            final_output = denoised.rgb;
            break;
        case 3: // hit distance
            final_output = vec3(denoised.a);
            break;
        case 4: // blur radius
            final_output = denoised.rgb + debug.rgb;
            break;
        case 5: // history length
            final_output = viridis_quintic(1.0 - imageLoad(history_length, p.xy).r * 255.0 / 32.0);
            break;
        case 6:
            final_output = normal * 0.5 + 0.5;
            break;
        case 7:
            final_output = albedo;
            break;
        default:
            break;
    }

    if (p.x < split_pixel)
        imageStore(output_image, p.xy, vec4(color.rgb, depth));
    else
        imageStore(output_image, p.xy, vec4(final_output.rgb, depth));
}