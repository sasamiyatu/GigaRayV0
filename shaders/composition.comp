#version 460
#extension GL_EXT_debug_printf : enable
#extension GL_GOOGLE_include_directive : enable
#include "brdf.h"
#include "math.glsl"

layout(local_size_x = 8, local_size_y = 8, local_size_z = 1) in;

layout(binding = 0, set = 0, rgba32f) uniform image2D path_tracer_input_image;
layout(binding = 1, set = 0, rgba32f) uniform image2D raster_input_image;
layout(binding = 2, set = 0, rgba32f) uniform image2D normal_roughness;
layout(binding = 3, set = 0, rgba32f) uniform image2D basecolor_metalness;
layout(binding = 4, set = 0) uniform sampler2D depth;
layout(binding = 5, set = 0, rgba32f) uniform image2D indirect_diffuse;
layout(binding = 6, set = 0, rgba32f) uniform image2D denoiser_output;
layout(binding = 7, set = 0, rgba32f) uniform image2D output_image;

layout( push_constant ) uniform constants
{
    mat4 inv_proj;
    ivec2 size;
    float image_split_pos;
} control;

void main()
{
    ivec3 p = ivec3(gl_GlobalInvocationID);
    if (any(greaterThanEqual(p.xy, control.size)))
        return;
    
    int split_pixel = int(float(control.size.x) * control.image_split_pos);
    const float exposure = 1.0;
    vec4 color = vec4(0.0);
    if (p.x <= split_pixel)
        color = imageLoad(path_tracer_input_image, p.xy);
    else
        color = imageLoad(raster_input_image, p.xy);
    vec2 uv = vec2(p.xy) / vec2(control.size);
    uv.y = 1.f - uv.y;
    vec4 normal_roughness = imageLoad(normal_roughness, p.xy);
    vec4 basecolor_metalness = imageLoad(basecolor_metalness, p.xy);
    //color.rgb = v.rgb;
    vec3 normal = decode_unit_vector(normal_roughness.rg, false, true);
    float depth = texelFetch(depth, p.xy, 0).r;
    vec4 indirect_diffuse = imageLoad(indirect_diffuse, p.xy);

    // Reinhardt tonemapping
    color.rgb = color.rgb / (color.rgb + 1.0);
    color.rgb *= exposure;
    vec3 gamma_corrected = pow(color.rgb, vec3(0.4545));
    //vec3 gamma_corrected = color.rgb;
    imageStore(output_image, p.xy, vec4(gamma_corrected.rgb, 1.0));

    //imageStore(output_image, p.xy, vec4(pow(basecolor_metalness.rgb, vec3(0.4545)), 1.0));
    //imageStore(output_image, p.xy, vec4(normal * 0.5 + 0.5, 1.0));

    vec2 ndc = (vec2(p.xy) + 0.5) / imageSize(raster_input_image);
    ndc = ndc * 2.0 - 1.0;
    vec4 screen_space = vec4(ndc, depth, 1.0);

    // These work
    vec4 view_space = control.inv_proj * screen_space;
    view_space.xyz /= view_space.w;
    float view_z = 1.0 / (control.inv_proj[2][3] * depth);

    vec4 denoised = imageLoad(denoiser_output, p.xy);


    if (p.x < split_pixel)
        imageStore(output_image, p.xy, vec4(gamma_corrected.rgb, 1.0));
    else
        imageStore(output_image, p.xy, vec4(denoised.rgb, 1.0));

    //vec4 v = imageLoad(test_img, p.xy + ivec2(0, 500));
    //imageStore(output_image, p.xy, v);
    //imageStore(output_image, p.xy, vec4(1.0, 0.0, 1.0, 1.0));
}